Compiler { dist_path: "pikascript-api/", source_path: "", class_list: {"Device": ClassInfo { this_class_name: "Device", super_class_name: "TinyObj", method_list: {"LED": MethodInfo { class_name: "Device", name: "LED", arg_list: None, return_type: Some(PyType { type_name: "any" }) }, "Uart": MethodInfo { class_name: "Device", name: "Uart", arg_list: None, return_type: Some(PyType { type_name: "any" }) }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: true }, "Device_LED": ClassInfo { this_class_name: "Device_LED", super_class_name: "TinyObj", method_list: {"off": MethodInfo { class_name: "Device_LED", name: "off", arg_list: None, return_type: None }, "on": MethodInfo { class_name: "Device_LED", name: "on", arg_list: None, return_type: None }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: false }, "Device_Uart": ClassInfo { this_class_name: "Device_Uart", super_class_name: "TinyObj", method_list: {"printName": MethodInfo { class_name: "Device_Uart", name: "printName", arg_list: None, return_type: None }, "send": MethodInfo { class_name: "Device_Uart", name: "send", arg_list: Some(ArgList { py_arg_list: "data:str", list: {"data": PyArg { py_type: PyType { type_name: "str" }, name: "data" }} }), return_type: None }, "setName": MethodInfo { class_name: "Device_Uart", name: "setName", arg_list: Some(ArgList { py_arg_list: "name:str", list: {"name": PyArg { py_type: PyType { type_name: "str" }, name: "name" }} }), return_type: None }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: false }, "PikaMain": ClassInfo { this_class_name: "PikaMain", super_class_name: "PikaStdLib_SysObj", method_list: {}, object_list: {"Device": ObjectInfo { class_name: "PikaMain", name: "Device", import_class_name: "Device" }, "PikaStdData": ObjectInfo { class_name: "PikaMain", name: "PikaStdData", import_class_name: "PikaStdData" }, "PikaStdLib": ObjectInfo { class_name: "PikaMain", name: "PikaStdLib", import_class_name: "PikaStdLib" }}, import_list: {}, script_list: Script { content: "            \"\\n\"\n            \"mem = PikaStdLib.MemChecker()\\n\"\n            \"\\n\"\n            \"print('mem used max:')\\n\"\n            \"mem.max()\\n\"\n            \"\\n\"\n            \"def EXPECT_EQ(test_name, input, expected):\\n\"\n            \"    print('-----TEST-----')\\n\"\n            \"    print(test_name)\\n\"\n            \"    if input != expected:\\n\"\n            \"        print('[Error]')\\n\"\n            \"        print(test_name)\\n\"\n            \"        print('[info] Expected:')\\n\"\n            \"        print(expected)\\n\"\n            \"        print('[info] Input:')\\n\"\n            \"        print(input)\\n\"\n            \"        # error\\n\"\n            \"        while True:\\n\"\n            \"            is_error = 1\\n\"\n            \"    else:\\n\"\n            \"        print('[ OK  ]')\\n\"\n            \"\\n\"\n            \"a = 0\\n\"\n            \"for i in range(0, 10):\\n\"\n            \"    if i == 5:\\n\"\n            \"        continue\\n\"\n            \"    a = a + i\\n\"\n            \"EXPECT_EQ('for_if_continue', a, 40)\\n\"\n            \"         \\n\"\n            \"a = 0\\n\"\n            \"for i in range(0, 10):\\n\"\n            \"    if i == 5:\\n\"\n            \"        break\\n\"\n            \"    a = a + i\\n\"\n            \"EXPECT_EQ('for_if_break', a, 10)\\n\"\n            \"\\n\"\n            \"a = 0\\n\"\n            \"for i in range(0, 10):\\n\"\n            \"    for k in range(0, 3):\\n\"\n            \"        # print(k)\\n\"\n            \"        a = a + k\\n\"\n            \"EXPECT_EQ('for_for_in_range', a, 30)\\n\"\n            \"\\n\"\n            \"a = 0\\n\"\n            \"for i in range(0, 10):\\n\"\n            \"    # print(i)\\n\"\n            \"    a = a + i\\n\"\n            \"EXPECT_EQ('for_in_range', a, 45)\\n\"\n            \"\\n\"\n            \"list = PikaStdData.List()\\n\"\n            \"list.append(7)\\n\"\n            \"list.append('eee')\\n\"\n            \"len = list.len()\\n\"\n            \"for item in list:\\n\"\n            \"    # print(item)\\n\"\n            \"    a = item\\n\"\n            \"EXPECT_EQ('list_for_loop', a, 'eee')\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"list = PikaStdData.List()\\n\"\n            \"list.append(7)\\n\"\n            \"list.append('eee')\\n\"\n            \"len = list.len()\\n\"\n            \"a1 = list.get(0)\\n\"\n            \"a2 = list.get(1)\\n\"\n            \"res = iter(list)\\n\"\n            \"EXPECT_EQ('iter', res, list)\\n\"\n            \"\\n\"\n            \"dict = PikaStdData.Dict()\\n\"\n            \"dict.set('a', 1)\\n\"\n            \"dict.set('b', 2)\\n\"\n            \"dict.remove('b')\\n\"\n            \"a = dict.get('a')\\n\"\n            \"b = dict.get('b')\\n\"\n            \"EXPECT_EQ('PikaStdData', a, 1)\\n\"\n            \"EXPECT_EQ('PikaStdData_2', b, 0)\\n\"\n            \"\\n\"\n            \"print('-----------------')\\n\"\n            \"print('[Tests Succeed]')\\n\"\n            \"# print('[Succeed] All Test Apssed.')\\n\"\n            \"\\n\"\n" }, is_package: false }, "PikaStdData": ClassInfo { this_class_name: "PikaStdData", super_class_name: "TinyObj", method_list: {"Dict": MethodInfo { class_name: "PikaStdData", name: "Dict", arg_list: None, return_type: Some(PyType { type_name: "any" }) }, "List": MethodInfo { class_name: "PikaStdData", name: "List", arg_list: None, return_type: Some(PyType { type_name: "any" }) }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: true }, "PikaStdData_Dict": ClassInfo { this_class_name: "PikaStdData_Dict", super_class_name: "TinyObj", method_list: {"__init__": MethodInfo { class_name: "PikaStdData_Dict", name: "__init__", arg_list: None, return_type: None }, "__iter__": MethodInfo { class_name: "PikaStdData_Dict", name: "__iter__", arg_list: None, return_type: Some(PyType { type_name: "any" }) }, "__next__": MethodInfo { class_name: "PikaStdData_Dict", name: "__next__", arg_list: None, return_type: Some(PyType { type_name: "any" }) }, "get": MethodInfo { class_name: "PikaStdData_Dict", name: "get", arg_list: Some(ArgList { py_arg_list: "key:str", list: {"key": PyArg { py_type: PyType { type_name: "str" }, name: "key" }} }), return_type: Some(PyType { type_name: "any" }) }, "remove": MethodInfo { class_name: "PikaStdData_Dict", name: "remove", arg_list: Some(ArgList { py_arg_list: "key:str", list: {"key": PyArg { py_type: PyType { type_name: "str" }, name: "key" }} }), return_type: None }, "set": MethodInfo { class_name: "PikaStdData_Dict", name: "set", arg_list: Some(ArgList { py_arg_list: "key:str,arg:any", list: {"arg": PyArg { py_type: PyType { type_name: "any" }, name: "arg" }, "key": PyArg { py_type: PyType { type_name: "str" }, name: "key" }} }), return_type: None }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: false }, "PikaStdData_List": ClassInfo { this_class_name: "PikaStdData_List", super_class_name: "TinyObj", method_list: {"__init__": MethodInfo { class_name: "PikaStdData_List", name: "__init__", arg_list: None, return_type: None }, "__iter__": MethodInfo { class_name: "PikaStdData_List", name: "__iter__", arg_list: None, return_type: Some(PyType { type_name: "any" }) }, "__next__": MethodInfo { class_name: "PikaStdData_List", name: "__next__", arg_list: None, return_type: Some(PyType { type_name: "any" }) }, "append": MethodInfo { class_name: "PikaStdData_List", name: "append", arg_list: Some(ArgList { py_arg_list: "arg:any", list: {"arg": PyArg { py_type: PyType { type_name: "any" }, name: "arg" }} }), return_type: None }, "get": MethodInfo { class_name: "PikaStdData_List", name: "get", arg_list: Some(ArgList { py_arg_list: "i:int", list: {"i": PyArg { py_type: PyType { type_name: "int" }, name: "i" }} }), return_type: Some(PyType { type_name: "any" }) }, "len": MethodInfo { class_name: "PikaStdData_List", name: "len", arg_list: None, return_type: Some(PyType { type_name: "int" }) }, "set": MethodInfo { class_name: "PikaStdData_List", name: "set", arg_list: Some(ArgList { py_arg_list: "i:int,arg:any", list: {"arg": PyArg { py_type: PyType { type_name: "any" }, name: "arg" }, "i": PyArg { py_type: PyType { type_name: "int" }, name: "i" }} }), return_type: None }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: false }, "PikaStdLib": ClassInfo { this_class_name: "PikaStdLib", super_class_name: "TinyObj", method_list: {"MemChecker": MethodInfo { class_name: "PikaStdLib", name: "MemChecker", arg_list: None, return_type: Some(PyType { type_name: "any" }) }, "RangeObj": MethodInfo { class_name: "PikaStdLib", name: "RangeObj", arg_list: None, return_type: Some(PyType { type_name: "any" }) }, "SysObj": MethodInfo { class_name: "PikaStdLib", name: "SysObj", arg_list: None, return_type: Some(PyType { type_name: "any" }) }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: true }, "PikaStdLib_MemChecker": ClassInfo { this_class_name: "PikaStdLib_MemChecker", super_class_name: "TinyObj", method_list: {"getMax": MethodInfo { class_name: "PikaStdLib_MemChecker", name: "getMax", arg_list: None, return_type: Some(PyType { type_name: "float" }) }, "getNow": MethodInfo { class_name: "PikaStdLib_MemChecker", name: "getNow", arg_list: None, return_type: Some(PyType { type_name: "float" }) }, "max": MethodInfo { class_name: "PikaStdLib_MemChecker", name: "max", arg_list: None, return_type: None }, "now": MethodInfo { class_name: "PikaStdLib_MemChecker", name: "now", arg_list: None, return_type: None }, "resetMax": MethodInfo { class_name: "PikaStdLib_MemChecker", name: "resetMax", arg_list: None, return_type: None }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: false }, "PikaStdLib_RangeObj": ClassInfo { this_class_name: "PikaStdLib_RangeObj", super_class_name: "TinyObj", method_list: {"__iter__": MethodInfo { class_name: "PikaStdLib_RangeObj", name: "__iter__", arg_list: None, return_type: Some(PyType { type_name: "any" }) }, "__next__": MethodInfo { class_name: "PikaStdLib_RangeObj", name: "__next__", arg_list: None, return_type: Some(PyType { type_name: "any" }) }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: false }, "PikaStdLib_SysObj": ClassInfo { this_class_name: "PikaStdLib_SysObj", super_class_name: "BaseObj", method_list: {"float": MethodInfo { class_name: "PikaStdLib_SysObj", name: "float", arg_list: Some(ArgList { py_arg_list: "arg:any", list: {"arg": PyArg { py_type: PyType { type_name: "any" }, name: "arg" }} }), return_type: Some(PyType { type_name: "float" }) }, "int": MethodInfo { class_name: "PikaStdLib_SysObj", name: "int", arg_list: Some(ArgList { py_arg_list: "arg:any", list: {"arg": PyArg { py_type: PyType { type_name: "any" }, name: "arg" }} }), return_type: Some(PyType { type_name: "int" }) }, "iter": MethodInfo { class_name: "PikaStdLib_SysObj", name: "iter", arg_list: Some(ArgList { py_arg_list: "arg:any", list: {"arg": PyArg { py_type: PyType { type_name: "any" }, name: "arg" }} }), return_type: Some(PyType { type_name: "any" }) }, "next": MethodInfo { class_name: "PikaStdLib_SysObj", name: "next", arg_list: Some(ArgList { py_arg_list: "arg:any", list: {"arg": PyArg { py_type: PyType { type_name: "any" }, name: "arg" }} }), return_type: Some(PyType { type_name: "any" }) }, "range": MethodInfo { class_name: "PikaStdLib_SysObj", name: "range", arg_list: Some(ArgList { py_arg_list: "a1:int,a2:int,a3:int", list: {"a1": PyArg { py_type: PyType { type_name: "int" }, name: "a1" }, "a2": PyArg { py_type: PyType { type_name: "int" }, name: "a2" }, "a3": PyArg { py_type: PyType { type_name: "int" }, name: "a3" }} }), return_type: Some(PyType { type_name: "any" }) }, "remove": MethodInfo { class_name: "PikaStdLib_SysObj", name: "remove", arg_list: Some(ArgList { py_arg_list: "argPath:str", list: {"argPath": PyArg { py_type: PyType { type_name: "str" }, name: "argPath" }} }), return_type: None }, "type": MethodInfo { class_name: "PikaStdLib_SysObj", name: "type", arg_list: Some(ArgList { py_arg_list: "arg:any", list: {"arg": PyArg { py_type: PyType { type_name: "any" }, name: "arg" }} }), return_type: None }}, object_list: {}, import_list: {}, script_list: Script { content: "" }, is_package: false }}, class_now_name: Some("PikaMain"), package_now_name: Some("PikaStdData") }