# origin APIs
class Tile:
    def __init__(self): ...
    def get_root(self, validRegion: Region, offset: Location) -> Tile: ...
    def generate_child(self, reg: Region, clipRegion: int) -> Tile: ...
    def width_compare(self, reference: Region) -> int: ...
    def height_compare(self, reference: Region) -> int: ...
    def shape_compare(self, reference: Region) -> int: ...
    def region_diff(self, tile: Tile) -> Region: ...


def is_point_inside_region(region: Region, location: Location) -> int: ...
def get_absolute_location(tile: Tile) -> Location: ...
def is_root_tile(tile: Tile) -> int: ...


class Region:
    def __init__(self): ...
    def intersect(self, in2: Region) -> Region: ...


class Location:
    def __init__(self): ...

# high level APIs

class BackGround:
    def __init__(self): ...
    def setColor(self, color: str): ...
    def getColor(self) -> str: ...
    def update(self): ...


class ElementList:
    def update(self): ...


class Element:
    def __init__(self): ...
    def move(self, x: int, y: int): ...
    def right(self, x: int): ...
    def lift(self, x: int): ...
    def up(self, y: int): ...
    def down(self, y: int): ...
    def update(self): ...
    def setAlpha(self, alpha: int): ...


class Box(Element):
    # override
    def update(self): ...
    def __init__(self): ...
    def setColor(self, color: str): ...
    def setSize(self, x: int, y: int): ...


class Window:
    background = BackGround()
    elems = ElementList()
    def __init__(self): ...
    def update(self): ...
